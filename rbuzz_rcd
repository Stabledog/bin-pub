#!/bin/bash

# Change to component directory based on partial-name-match


function printMsg {
    echo $1 >&2
}

function indexExists {
    [[ -f $gotoRoot/.tox-index ]]
}

function findIndex {
    if [[ -f .tox-index ]]; then
        pwd
        return
    fi
    if [[ "$PWD" == "/" ]]; then
        false
        return
    fi
    cd ..
    findIndex
}

function findRootLocal {
	# Walk up the filesystem until we find a raveRoot file:
    if [[ "$PWD" == "/" ]]; then
    	exit 1  # Can't find a rave root
    fi
    if [[ -f ./raveRoot ]]; then
    	cd ..
    	echo $PWD
    	exit 0
    fi
    cd ..
    findRootLocal  # Recurse
}

function rebuildIndex {
    printMsg "(Re)building tree index..."
    pushd $gotoRoot >/dev/null
    find * -type d | grep -vF "/arm
/ia32
/.svn
/x86
/clfs" > ~/tmp/.tox-index
    cp ~/tmp/.tox-index $gotoRoot/.tox-index
    popd >/dev/null
}

function appendIndex {
    [[ -z $gotoRoot ]] && { echo "ERROR: No .tox-index found from $PWD" >&2; return; }
    local newDir=$1
    (
        cd $gotoRoot
        newDir=$(echo "$newDir" | sed -r "s^${gotoRoot}/?^^") # Trim out the root to get relative path
        if [[ -z $newDir ]]; then
            echo "Can't add index root to the index.  Not necessary, use \"tox /\" for that." >&2
            exit
        fi
        printMsg "Appending: [$newDir] to index at [$gotoRoot]"
        echo "$newDir" >> .tox-index  # Trim out the root to get relative path
        cat .tox-index | sort -u > .tox-index-tmp
        mv .tox-index-tmp .tox-index
    )

}

function indexInfo {
    [[ -z $gotoRoot ]] && { echo "ERROR: No .tox-index found from $PWD" >&2; return; }
    (
        orgDir=$(pwd)
        echo "PWD: [$orgDir]" >&2
        orgDir=$(echo "$orgDir" | sed -r "s^${gotoRoot}/?^^") # Trim out the root to get relative path
        cd $gotoRoot
        echo "Index: [${gotoRoot}]" >&2
        echo "# of dirs in index: $(cat .tox-index | wc -l)" >&2
        if [[ -z "$orgDir" ]]; then
            echo "PWD == index root" >&2
        elif grep -q "^${orgDir}\$" .tox-index; then
            echo "Index contains PWD"  >&2
        else
            echo "Index does NOT contain PWD" >&2
        fi
    )
}

function editIndex {
    [[ -z $gotoRoot ]] && { echo "ERROR: No .tox-index found from $PWD" >&2; return; }

    echo "Editing index at [$gotoRoot]:" >&2
    echo "!${EDITOR} ${gotoRoot}/.tox-index"
}

function filterIndexRaw {
    local rgx="$1"
    cat $gotoRoot/.tox-index | grep "$rgx"
}

function filterIndex {
    local rgx="$1"
    cat $gotoRoot/.tox-index | grep "$rgx"
}

function filterIndexCount {
    local rgx="$1"
    cat $gotoRoot/.tox-index | grep "$rgx" | wc -l
}

function initIndex {
	echo -n "ERROR: could not find .tox-index or GENESYS_ROOT.  Would you like to create an index here in $PWD? " >&2
	if ! read -n1 response; then
		echo ""
		exit 1
	fi
	case $response in
		[yY]) echo -n "" ;;
		*) 
			echo ""
			exit 1 ;;
	esac
	gotoRoot=$PWD
	touch $gotoRoot/.tox-index # Create the index file
	rebuildIndex
	echo "Index creation completed.  Please re-run your original command now."
	exit 1
}

function gotoComponentCore {
	gotoRoot=$(findRootLocal &2> /dev/null)
    if [[ "$gotoRoot" == "" ]]; then
        # Scan up the tree looking for a .tox-index:
        gotoRoot=$(findIndex)
        if [[ "$gotoRoot" == "" ]]; then

            if ! initIndex; then
				false
				return
        	fi
        fi
    fi
    if [[ "$1" == "--help" ]]; then
        echo "tox [options] {dir_fragment} [index]" >&2
        echo "  Quick-CD to a subdir matching dir_fragment." >&2
        echo "  -x: Rebuild dir index " >&2
        echo "  -a: Append current dir to index" >&2
        echo "  -e: Edit current index" >&2
        echo "  -q: Info about current index " >&2
        false
        return
    elif [[ "$1" == "-x" ]]; then
        shift
        rebuildIndex
    elif [[ "$1" == "-a" ]]; then
        shift
        appendIndex $PWD
    elif [[ "$1" == "-q" ]]; then
        shift
        indexInfo $PWD
    elif [[ "$1" == "-e" ]]; then
        shift
        editIndex $PWD
    fi

    if ! indexExists ; then
        rebuildIndex
    fi

    if [[ "$1" == "" ]]; then
        return
    fi

	# Try to match it as a normal dirname:
    if [[ "$1" == "/" ]]; then
        echo $gotoRoot
        return
	elif [[ -d $1 ]]; then
		echo $1
		return
	fi

    if [[ "$2" == "" ]]; then
        # User did not specify an index
        local cnt=$(filterIndexCount "$1")
        if [[ $cnt == 0 ]]; then
            printMsg "No matching directories in index.  Use -x to rebuild index."
            return
        elif [[ $cnt == 1 ]]; then
            CHOICE="$(filterIndexRaw $1)"
            echo "$gotoRoot/$CHOICE"
            return
        fi
        select CHOICE in $(filterIndex "$1"); do
            if (( $REPLY < 1 )); then
                return
            fi
            echo "$gotoRoot/$CHOICE"
            return
        done
    else
        # An array index was specified:
        local ix=$2

        local dir=$(filterIndex "$1" | head -n $ix | tail -n 1)
        if [[ -d $gotoRoot/$dir ]]; then
            echo "$gotoRoot/$dir"
            return
        else
            printMsg "No matching directories in index.  Use -x to rebuild index."
        fi
    fi

}

gotoComponentCore "$@"



