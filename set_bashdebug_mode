# vim: filetype=sh :
function set_bashdebug_mode {
    # Enables smarter bash tracing (print file/line info with -x output)
    # Options:
    #   --on:  turn it on 
    #   --off: turn it off 
    #   --tty [device]: send output to specified pty (e.g. -tty /dev/pts/112)
    #       (--tty implies --on as well, you don't have to add the latter)
    #   --gen1:  Generate the PS4 setting for use in other scripts
    #
    # Tips:
    #    - Unset PROMPT_COMMAND to reduce noise in interactive use cases
    #    - On the right-side in --tty mode, do 'clear; tty; cat' so manual
    #      commentary can interweave with shell diagnostics
    #
    function print_bad_bxdb {
        echo -e "\E[1;31mBad or no arg[$1]: use --on | --off | --tty /dev/pts/??? | --gen1\E[0m" >&2
        false
    }
    [[ ${#@} == 0 ]] &&  { print_bad_bxdb $1 ; return; }
    local Ps4_proto='\033[0;33m+(${BASH_SOURCE}:${LINENO}):\033[0m ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

    while [[ ! -z $1 ]]; do
        case $1 in
            --on|-o)
                PS4="$Ps4_proto"
                set -x
               ;;
           --off|-f)
               PS4=':'
               set +x
               exec 13>&-
               unset BASH_XTRACEFD
               ;;
           --tty|-t)
               exec 13>${2}
               BASH_XTRACEFD=13
               shift
               set_bashdebug_mode --on
               ;;
           --gen1)
               echo "PS4='$Ps4_proto'"
               echo "# set -x"
               ;;

           *)
               print_bad_bxdb $1; return; 
               ;;
        esac
        shift
    done
}

function set_bashdebug_tty() {
    # Run this on the SUT side, after
    # you start bashdebug_tty on the monitor side
    local xtty=$1
    [[ -e $xtty ]] || { 
        echo "ERROR: expecting tty name as \$1" >&2;
        echo " Hint: run bashdebug_tty on the monitor terminal first, then run set_bashdebug_tty [tty] on the SUT terminal."

        false; return; 
    }

    unset PROMPT_COMMAND
    set_bashdebug_mode --tty $xtty
    echo "PROMPT_COMMAND has been disabled, tty=$xtty" >${BASH_XTRACEFD}
}

function bashdebug_tty() {
    # Run this on the monitor side 
    clear; 
    echo "Run set_bashdebug_tty $(tty) on the SUT side now."
    date; cat >/dev/null
    echo " ::: end: $(date) ::: "
    echo "-----------------------------------------"
    echo
}

