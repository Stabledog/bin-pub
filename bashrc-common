# vim: filetype=sh :


if [[ -n $CUSTOM_SHELL ]]; then
    # We expect bash to come from our build:
    if [[ `which bash` != ${CUSTOM_SHELL} ]]; then
        PATH=$(dirname -- ${CUSTOM_SHELL}):$PATH
    fi
fi

function init_sh_tools {
    # Platform-dependent tools detection (dang you, MacOS!):
    eval $(
        PATH=/opt/bb/bin:/usr/local/bin:/usr/bin:/bin
        for tool in Realpath.realpath Sed.sed Uname.uname; do
            tv=${tool#*.}
            tp=$(which $tv)
            [[ -z $tp ]] && { echo "ERROR: can't find $tv in $PATH" >&2; continue; }
            echo "${tool%.*}=$tp;"
        done
    )
}

init_sh_tools


init_browser_tools() {

    alias wbs='web-search.sh'
    alias goo='web-search.sh google'
    alias gogl='web-search.sh gogl'
    alias web-search='web-search.sh'
    alias trnma='web-search trnma'
    alias mine='web-search mine'
}

[[ -n $PS1 ]] && init_browser_tools


function define_yellow {
    function _yellow_ {
        # Do "Yellow=1 [args]" to enable _yellow_ (diagnostic) output,
        # or "yellow [args]" for unconditional output
        if [[ -n $Yellow ]]; then
            yellow "$@"
        fi
    }
    function yellow {
        echo -en "\033[;33m" >&2
        echo "$@" >&2
        echo -en "\033[;0m" >&2
    }
    unset define_yellow
}

define_yellow

# set_bashdebug_mode is a function that's useful for debugging shell commands+script in general:
[[ -f ~/bin/set_bashdebug_mode ]] && source ~/bin/set_bashdebug_mode

# Outer code can define notBash=true to disable non-posix bashisms:
if [[ ! -z $notBash ]] && $notBash; then
    notBash=true; isBash=false
    xlocal=""  # ksh doesn't allow 'local'
else
    notBash=false; isBash=true
    xlocal=local
fi


[[ -z $LmHome ]] && export LmHome=$HOME

alias pathadd=$LmHome/bin/pathadd

# The ~/projects dir should be a symlink to a working root appropriate for
# source controlled and/or toolchain-built projects.  An mbig is a good candidate,
# or /c/Projects on a WSL1 environment, or /var/Projects on a Mac.  The HOME
# dir itself is not an ideal place for the storage, in most cases.  On a
# Docker container, /root/projects can point to a mounted volume to satisfy
# this need:
if [[ -d ~/projects ]]; then
    ProjectsHome=$( cd ~/projects; $Realpath . )
else
    ProjectsHome=${ProjectsHome:-$HOME/projects}
    echo "WARNING: no ~/projects dir: this should be a symlink to mbig, /c/Projects, /var/projects, or similar general project root.  \$ProjectsHome remains unresolved." >&2
fi
export ProjectsHome


function isSunos {
    [[ $( $Uname ) == "SunOS" ]]
}


errExit() {
    echo "ERROR: $*" >&2
    exit 1
}

die() {
    echo "ERROR: $*" >&2
    exit 1
}




#----------------------------------------------------------------
#  Shell identification
#
is_cygwin() {
    [[ -n $CYGWIN ]] || false
}
function shell_identify {
	export CYGWIN
	export MACOSX=false
	if $notBash; then
		eval "function shopt {
			 doNothing=true
			# turn shopt into nothingness if not bash
		}"
	fi

	[[ -f /Cygwin.bat ]] || [[ -d /home/mobaxterm ]]  && {
        #  See https://www.cygwin.com/cygwin-ug-net/using-cygwinenv.html on $CYGWIN
	    CYGWIN="export:winsymlinks:native"
    }
    uname -a | grep -E MINGW &>/dev/null && {
        export MSYS=winsymlinks:native  # git bash
    }

	[[ -d /Applications/Preview.app ]] && MACOSX=true
    [[ $( $Uname ) == Darwin ]] && MACOSX=true

	# If not running interactively, don't do anything
	if [[ ! -t 0 ]]; then
		return
	fi
}


shell_identify


#----------------------------------------------------------------


alias which='type -p '


IGNOREEOF="3"   # Don't close interactive shell for ^D


function ptop {
    # Run top, but filter on a specific command line string, e.g.:
    #
    #     $  ptop my_busy_proc
    #

    eval "$xlocal cmd $1"
    top -p $(pgrep ${cmd} | head -n 19 | tr '\n' ',')0
}



TERM=xterm-256color
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

function initLsStuff {

    function ls_less {
        command ls --color=yes -- "$@" | less -RFSX
    }
    function ls_grep() {
        command ls -la | command grep -E "$@"
        builtin set +f
    }

    if [[ -n $PS1 ]]; then
        alias lsl=ls_less
        alias ll='ls -alF'
        alias la='ls -A'
        alias lra='ls -lrta'
        alias l='ls -CF'
        alias l1='ls -1'
        alias lr='ls -lrt'
        alias lg='builtin set -f; ls_grep'
        alias lsg='builtin set -f; ls_grep'
    fi

	if $MACOSX; then   # Mac doesn't have dircolors
		CLICOLOR=YES
		alias ls='ls -G'
	elif which dircolors &>/dev/null; then
		eval $(dircolors --bourne-shell)
		alias ls='command ls --color=auto '
        LS_COLORS+=':ow=01;33' # fix horrid unreadable blue-on-green other-writable dirnames
	fi
}


initLsStuff

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
if $isBash; then
    shopt -s checkwinsize
fi


function initLessStuff {
    function tree_less {
        tree -C "$@" | less -RFSX
    }

    function find_less {
        if [[ -z $1 ]]; then
            local args=
        else
            local args="--pattern $@"
        fi

        find | less -RFSX $args
    }

    alias treel=tree_less
    alias findl=find_less
}

initLessStuff

# Set the terminal title:
function title {
    export title_tail="$*"
    export title_hostname_result=
    title_hostname() {
        [[ -n $title_hostname_result ]] && { echo $title_hostname_result; return; }
        [[ -x /bin/hostname ]] && { title_hostname_result=$(/bin/hostname); return; }
        title_hostname_result=$HOSTNAME
        echo $title_hostname_result
    }
    printf '\E]2;%s\E\\' "$title_tail - $(tty)@$(title_hostname)"
}

if [[ -z $title_tail ]]; then
    title "bash"
else
    title "$title_tail"
fi

unset DISPLAY

[[ -f ~/bin/bash_aliases ]] && source ~/bin/bash_aliases

is_cygwin && {
	source ~/bin/cyg/cyg-utils
	alias sudo="$@"
}


[[ -x ${HOME}/bin/vim-tmux ]] && {
    alias vit="${HOME}/bin/vim-tmux -v";
    alias vih="${HOME}/bin/vim-tmux -h";
}
[[ -x ${HOME}/bin/tmux-split-launch ]] && {
    alias tsh="${HOME}/bin/tmux-split-launch -h"
    alias tsv="${HOME}/bin/tmux-split-launch -v"
}

export EDITOR=vim
export XEDITOR=$EDITOR


# disable flow control for terminal:
/bin/stty -ixon -ixoff 2>/dev/null

# Magic space expands !! and !-{n} when you hit spacebar after.  You can also do
# {cmd-frag}!<space> to expand the last command that started with that frag.
if $isBash; then
    set -o vi
    bind Space:magic-space
fi




# setargs is used for arbitrary mapping of positional args.  (Disabling
# glob expansion is both a feature and sometimes a bug.)
alias setargs='set -f; set -- '
alias seta=setargs
alias getargs='builtin echo "$@"'
alias geta=getargs


# If we want a shell to not quit, here's how:
function no_exit {
	alias exit="echo 'Sorry, exit is disabled.  Use \"command exit\" if  serious'"
}

# Preferred options for `less`:
export LESS="-rFX"


function parse_ext_tail {
    # If we've shelled-out from vi/vim, we want to know about it to avoid chaos:
    if [[ -n $VIM ]]; then
        echo -n '[vi]'
        return
    elif [[ -n $bbproxy_shell_ps1 ]]; then
        echo -n '[bbproxy]'
        return
    fi
}

function parse_lh_status {
    [[ -z $HISTFILE ]] && return;
    [[ $HISTFILE == ~/.bash_history ]] && return
    echo -n "+H"
}

unset PS2_HOST_SUFFIX
function parse_host_suffix {
    # What sort of unix variant/flavor are we?
    [[ -n $PS1_HOST_SUFFIX ]] && { echo $PS1_HOST_SUFFIX; return; }
    [[ -n $PS1_SUPPRESS_HOST_SUFFIX ]] && return
    [[ -f /.dockerenv ]] && { PS1_HOST_SUFFIX='Docker'; echo $PS1_HOST_SUFFIX; return; }
    case $(uname -a) in
        Darwin*)
            PS1_HOST_SUFFIX='Mac'; echo $PS1_HOST_SUFFIX; return
            ;;
        Linux*-WSL2*)
            PS1_HOST_SUFFIX='Wsl2'; echo $PS1_HOST_SUFFIX ; return
            ;;
        Linux*-Microsoft*)
            PS1_HOST_SUFFIX='Wsl1'; echo $PS1_HOST_SUFFIX ; return
            ;;
        CYGWIN*)
            PS1_HOST_SUFFIX='Cyg'; echo $PS1_HOST_SUFFIX ; return
            ;;
        MINGW*)
            PS1_HOST_SUFFIX='Gitb'; echo $PS1_HOST_SUFFIX ; return
            ;;
        # Other platform-type detections can be added here:
    esac
    if which lsb_release &>/dev/null; then
        if lsb_release -a 2>/dev/null | egrep -q 'RedHat'; then
            PS1_HOST_SUFFIX='rhat'; echo $PS1_HOST_SUFFIX; return
        fi
    fi
    PS1_HOST_SUFFIX='Generic'  # undetected
    echo $PS1_HOST_SUFFIX
}

function t_setFancyPs1 {
    [[ -n $GITSTUFF_INIT ]] || parse_git_branch() { :; }

    if ${PS1_INCLUDE_GIT_BRANCH:-true}; then
        local gitBranch=$(parse_git_branch)
    fi
    PROMPT_DIRTRIM=3
    # NOTE: to avoid problems with cursor positioning due to fancy PS1,
    # be aware of the need to escape non-printing chars (see https://stackoverflow.com/a/19501528/237059)
PS1='
\[\033[1;33m\][\D{%m-%d %H:%M.%S}]\[\033[0m\] \[\033[1;35m\]\w\[\033[0m\]$(parse_git_branch)
\[\033[1;36m\][\u $(parse_host_suffix) \h]\[\033[0m\]$(parse_ext_tail)$Ps1Tail$(parse_lh_status)> '
}




if $isBash; then
    shopt -s direxpand 2>/dev/null || true
fi

function notepad {
    local fname=~/notepad
    while [[ -n $1 ]]; do
        case $1 in
            [0-9])
                fname=~/notepad_$1
                ;;
            --help|-h)
                (
                    echo "notepad # Edit ~/notepad"
                    echo "notepad 3 # Edit ~/notepad_3"
                    echo "notepad 2 - # Cat stdin to ~/notepad_2 then edit"
                    echo "notepad 4 -c # Send ~/notepad_4 to clipboard"
                ) >&2
                return
                ;;

            -c)
                cat $fname | xclip -i
                return
                ;;
            -)
                echo "Hit Ctrl+D to end entry:" >&2
                cat > $fname
                $EDITOR $fname
                return
                ;;
            *)
                echo "ERROR: unknown arg $1" >&2; return;
                return
                ;;
        esac
        shift
    done
    $EDITOR $fname
}



function quickshell() {
    [[ $@ =~ -h|--help ]] && {
        echo 'Reset project-specific env and start interactive subshell. Examples:'
        echo '$  qs echo Entering quickshell # Run any command you like on entry'
        echo '$  qs cd somewhere/else \; ls -al # Sequence with \; separator'
        echo '$  qs --help  # This help'
        return
    }

    $BASH --init-file <(
        echo 'export QSLEV'
        echo '[[ -n QSLEV ]] && QSLEV=$(( $QSLEV + 1 )) || QSLEV=1'
        echo 'export Ps1Tail="qs:${QSLEV}"'
        echo 'unset taskrc_dir'
        cat ~/.bashrc;
        echo 'HISTFILE=~/.bash_history'
        if [[ $# -gt 0 ]]; then
            echo 'set -x &>/dev/null'
            echo "$@"
            echo 'set +x &>/dev/null'
        fi
    )
}

[[ -n $PS1 ]] && alias qs=quickshell

function load_rcs1 {
    eval "$xlocal rootDir=$1"
    while read path; do
        [[ -z $path ]] && continue
        [[ -f $path ]] || continue
        echo "$path"
    done < <( /bin/ls -1 -- ${rootDir}/.taskrc/ 2>/dev/null | egrep -v '\.vim$' | sort | $Sed -e "s%^%${rootDir}/.taskrc/%" )
}

function loadTaskrcs {
    local logfile9=$HOME/.loadtaskrcs.log
    echo "$(date): loadTaskrcs: trainload initialization of ~/.taskrc" > $logfile9

    function xlog_rc {
        echo "+++ $@" >> $logfile9
    }

	# Load everything in $HOME/.taskrc, sorting alpha.  Most
	# of these should be symlinks.
	while read line; do
		if [[ -f $line ]]; then
		    xlog_rc "$line"
            source $line >> $logfile9 2>&1
            [[ $? == 0 ]] || { echo "Error sourcing [$line] in loadTaskrcs()" >> $logfile9;  }
        fi
    done < <( load_rcs1 "$HOME" )
}

[[ -f ~/bin/sourceMeRun.taskrc ]] && source ~/bin/sourceMeRun.taskrc

function reset {
    # The standard reset doesn't restore the cursor, necessarily.
    setterm -cursor on
    command reset
}

# Completion setup quickly:
# curl -sL https://github.com/Stabledog/complete-alias/releases/download/1.18.4/setup-complete-alias.sh | bash -
[[ -f "${HOME}/.completion_loader" ]] && source "${HOME}/.completion_loader" # Added by setup-complete-alias.sh

[[ -f ${HOME}/bin/git.bashrc ]] && { source ${HOME}/bin/git.bashrc; initGitStuff; }

if $isBash; then
    # The 'tox' command:
    if [[ $PS1 ]]; then
        source ${LmHome}/bin/tox-py/tox-completion.bash &>/dev/null
    fi
fi

# loop_cmd is very handy:
[[ -r ${LmHome}/bin/loop_cmd ]] && sourceMe=1 source ${LmHome}/bin/loop_cmd
alias loop=loop_cmd

unalias rm 2>/dev/null # If someone aliased my rm, cut it out.

export MYLIBS=${LmHome}/mylibs/$( $Uname )

# Make tmux use 256 colors so vim highlighting works right:
alias tmux='tmux -2'
alias tw='tmuxw'

python3() {
    [[ -n ${BEST_PY3} ]] && { "$BEST_PY3" "$@" ; return; }
    local cand;
    for cand in python3.{10,9,8,7} python3 python; do
        local py_cand="$( command which ${cand} 2>/dev/null)"
	    [[ -n $MSYS ]] && {
            "$py_cand" -c 'import sys; sys.exit(0)' &>/dev/null || continue
        } || {
            # On Unix-ish shells, avoid a Windows versions of python:
            "$py_cand" -c 'import termios' &>/dev/null || \
		    continue  # We don't want a dos/windows version
        }
        BEST_PY3="${py_cand}"
        break
    done
    [[ -z "$BEST_PY3" ]] && { echo "ERROR: no python3 on path" >&2; false; return;  }
    "$BEST_PY3" "$@"
}

[[ -n $PS1 ]] && t_setFancyPs1


[[ -n $PS1 && -f ${HOME}/.local/bin/cdpp/cdpp ]] && source ${HOME}/.local/bin/cdpp/cdpp # Added by cdpp-setup.sh

[[ -n $PS1 && -f ${HOME}/.local/bin/localhist/localhist ]] && source ${HOME}/.local/bin/localhist/localhist # Added by localhist setup.sh

[[ -n $PS1 && -f ${HOME}/.bash_completion.d/localhist-completion.bash ]] && source ${HOME}/.bash_completion.d/localhist-completion.bash # Added by localhist setup.sh

[[ -n $PS1 && -e ${HOME}/.taskrc-kit-loader ]] && source ${HOME}/.taskrc-kit-loader # Added by taskrc-kit setup.sh

[[ -z $MSYS ]] && {
    # Not on git-bash, but otherwise undupe the PATH
    [[ -f ~/bin/path_undupe.py ]] && {
        tmpPath="$(python3 ~/bin/path_undupe.py -u )"
        [[ -n $tmpPath ]] && PATH="$tmpPath" || echo "ERROR: path_undupe.py in .bashrc failed" >&2
    }
}

[[ -f $HOME/.cargo/env ]] && . "$HOME/.cargo/env"

# If there's a .taskrc directory in HOME, just source everything found there.
# This should be the LAST environment-changing operation in .bashrc, because
# .taskrc/ files are the most machine-and-user-specific elements that
# matter.  Basically you can override anything else with a .taskrc/* file
# tuned exactly to purpose with all context available at load time.
if [[ -d $HOME/.taskrc ]] && $isBash; then
	loadTaskrcs
fi


