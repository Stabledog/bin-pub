# vim: filetype=sh :
# sourceMeRun.taskrc

function stub() {
    [[ -z $stub_count ]] && stub_count=1
    echo -e "\033[;31m >>> [$stub_count]: stub: [$@]\033[;0m" >&2
    (( stub_count++ ))
}

function call_stack() {
    local -i cur_frame=$1
    [[ -n $cur_frame ]] || cur_frame=1
    while true; do
        if ! caller $cur_frame >&2 ; then
            break
        fi
        (( cur_frame++ ))
    done
}

function bpoint() {
    # Miniature REPL for shell to aid debugging scripts
    #
    # How to use bpoint within a piped context:
    #    If the function you're debugging has its input or output redirected
    #    in ways which interfere with the bpoint eval loop,
    #    you'll need to invoke bpoint with an explicit terminal device,
    #    e.g.:
    #       tty # Get tty for your test terminal
    #       bpoint < /dev/pts/101
    #       bpoint 2>/dev/pts/101
    #
    if [[ -z $bp_hist_init ]]; then
        HISTORY=$HOME/.bpoint_history
        [[ -f $HISTORY ]] || touch $HISTORY
        history -c
        history -r $HISTORY
        bp_hist_init=true
    fi
    [[ -z $bpoint_count ]] && bpoint_count=1
    echo -e "\033[;31m$(call_stack 1 2>&1)\n >>> [$bpoint_count]: Break args=[$@]\033[;0m" >&2
    local eval_result=0
    local color
    while true; do
        read -p "$(echo -en '\033[;33m >>> Enter expression: \033[;0m')" -e expression
        [[ -z $expression ]] && break
        eval "$expression" >&2
        eval_result=$?
        [[ $eval_result == 0 ]] && color=32 || color=31
        echo -e "\033[;${color}m >>> eval {${expression}} returns ${eval_result}\033[;0m" >&2
        history -s "$expression" ; history -w $HISTORY
    done
    (( bpoint_count += 1 ))
}

sourceMe() {
    # Help function
    cat <<EOF
sourceMeRun [script-name] [commands...]
   Sources [script-name] in a subshell with "sourceMe=1" and 
   then eval()'s "commands".  Result code is printed.  If 
   script is on the path it is found, otherwise current dir is 
   assumed. Commands can read stdin if needed.  

sourceMeEval [script-name] [commands ...]
    Same as sourceMeRun() but evals in current shell.

sourceMeLoop [script-name] [commands ...]
    Same as sourceMeRun() but enters bpoint() loop inside the
    subshell after evaluating "commands"

bpoint <breakpoint name args...>
    Embeddable breakpoint. Prints "breakpoint name args" 
    and then prompts for expression on stdin and evals it in 
    the current shell context, printing expr result. Empty
    expr returns. 

    Includes expression in readline history

stub <trace data>
    Print auto-incrementing counter and stub text in red to 
    to stderr.

call_stack <cur_frame=1>
    Print bash caller info for given frame

EOF
}

sourceMeRun() {
    # Source script $1 and eval everything after that in subshell
    [[ -z $1 ]] && return $(die no script source path provided)
    cscript=$1
    if [[ ! -f $cscript ]]; then
        cscript=`which $1` || return $(die cant find script "$1")
    else
        # They don't specify a path, so its local dir:
        [[ $cscript != */* ]] && cscript="./${cscript}"
    fi
    (
        sourceMe=1 source "$cscript"
        shift
        eval "$@"
    )
    echo "[result=$?]"
}

sourceMeEval() {
    # Source script $1 and eval everything after that in CURRENT shell
    [[ -z $1 ]] && return $(die no script source path provided)
    cscript=$1
    if [[ ! -f $cscript ]]; then
        cscript=`which $1` || return $(die cant find script "$1")
    else
        # They don't specify a path, so its local dir:
        [[ $cscript != */* ]] && cscript="./${cscript}"
    fi
    sourceMe=1 source "$cscript"
    shift
    eval "$@"
    echo "[result=$?]"
}

sourceMeLoop() {
    # Source script $1 and then enter a bpoint loop in CURRENT shell
    [[ -z $1 ]] && return $(die no script source path provided)
    cscript=$1
    if [[ ! -f $cscript ]]; then
        cscript=`which $1` || return $(die cant find script "$1")
    else
        # They don't specify a path, so its local dir:
        [[ $cscript != */* ]] && cscript="./${cscript}"
    fi
    (
        sourceMe=1 source "$cscript"
        shift
        echo "REPL loop with $cscript context:"
        bpoint "SourceMe"
    )
    echo "[result=$?]"
}


