#!/bin/bash
# Debugging bash scripts with ddd and bashdb

useTty=""  # Send -t as first param to let the current console handle debugger tty
ddd_Testscript=""  # Use -e to edit a test script for launch
Allargs=$*
traceLogfile=/tmp/dddbash/trace.log

function trace_init {
	mkdir -p $(dirname $traceLogfile)
	rm -rf  $traceLogfile &>/dev/null
}

trace_init

function trace {
	# Set dddbashTraceEnable to turn on diagnostics for this script.
	if [[ -z dddbashTraceEnable ]]; then
		return
	fi
	local prefix="dddbash-trace($(date)): "
	echo "$prefix $@" >&2
	echo "$prefix $@" >> $traceLogfile
}

function errExit {
	# Print all params to stderr, prefixed by "ERROR".  If '$StderrLog' is defined,
	# messages get echoed there as well.
	local msg="ERROR: $@"
	if [[ ! -z "$StderrLog" && -f "$StderrLog" ]]; then
		echo "$msg" > "$StderrLog"
	fi
	echo "$msg" >&2
	exit 1
}	# </ errExit  


function ddd_prereqs {
	if ! which ddd >/dev/null; then
		errExit "ddd is not installed" 
	fi
	if ! which bashdb >/dev/null; then
		errExit "bashdb is not installed"
	fi
	BASHDB=$(which bashdb)
	export BASHDB
}	# </ ddd_prereqs  



function ddd_editTestscript {
	read -p "Test script name: " -e -i   "../testx" ddd_Testscript
	if [[ $? -ne 0 ]] || [[ -z "$ddd_Testscript" ]]; then
		false
		return
	fi
	if [[ ! -f $ddd_Testscript ]]; then
		# Create initial script text:
		touch $ddd_Testscript 
		local scr=$(readlink -f $ddd_Testscript)
		echo "#!/bin/bash" > $ddd_Testscript
		echo -e "# $scr\n" >> $ddd_Testscript
		echo "# sourceMe=1 source some_other_script" >> $ddd_Testscript
	else
		touch $ddd_Testscript 
	fi
	chmod +x $ddd_Testscript
	$EDITOR $ddd_Testscript

}	# </ ddd_editTestscript  


function ddd_parseArgs {
	local firstName=""
	while [[ ! -z "$1" ]]; do
		case $1 in
			-t) useTty=" --tty" ; shift ;;  # Let ddd use our terminal as its console
			-e) ddd_editTestscript ; shift ;; # Launch editor to compose a temporary script for testing
			*) 
				if [[ -z "$firstName" ]]; then
					firstName=$1
					shift
				else
					# As soon as we encounter second not-our-arg, everything else goes to ddd:
					break 
				fi
				;;
		esac
	done
	Allargs="$@"
	if [[ ! -z "$ddd_Testscript" ]]; then
		scriptName=$ddd_Testscript
	else
		scriptName=$firstName
	fi
}	# </ ddd_parseArgs  


function dddbash_main {
	trace "dddbash_main args: $@"
	ddd_prereqs
	ddd_parseArgs "$@"

	# If the script path isn't specific, lets make it so:
	if [[ ${scriptName} =~ / ]]; then
		# The script name contains a slash, so we convert it to a full path:
		scriptName="$(readlink -f $scriptName)"
		trace "stub 1"
	else
		trace "stub 2"
		# it could be in the current dir:
		if [[ -x ./$scriptName ]]; then
			trace "stub 2.1"
			scriptName="$PWD/$scriptName"
		else
			trace "stub 2.2"
			# Maybe it's on the PATH:
			local tx=$(which $scriptName)
			if [[ ! -x "$tx" ]]; then
				echo "Can't find $scriptName on the PATH, relative path, or current dir" >&2
				return 1
			fi
			scriptName="$tx"
		fi
	fi
	trace "Converted scriptname: $scriptName"
    local cmd="$DDD $useTty --debugger $BASHDB -- $scriptName  $Allargs"
    trace "cmd=$cmd"
    $cmd
}

if [[ -z $sourceMe ]]; then

	DDD=$(which ddd)
	dddbash_main "$@"

fi
