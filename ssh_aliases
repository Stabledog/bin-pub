#!/bin/bash

# ssh loves me when it doesn't complain about host fingerprints:
function getSshLovesMe {
    echo "-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
}

# Popular options when rsync-ing to/from pipeline machines:
function getRsyncOpts {
    echo -n "-avz --progress "
    echo -n "-e \""
    echo -n "ssh $(getSshLovesMe)\" "
}

# Run ssh command without strict host checking
function sshRunCmd {
    ssh $(getSshLovesMe) "$@"
}

# Run scp without strict host checking:
function scpLite {
    scp $(getSshLovesMe) $@
}

function printAlias {
	local xkey="^[[:space:]]*$1"
	echo "$SSH_ALIASES" | egrep "$xkey" | sed "s^lovesMe^$(getSshLovesMe)^g"
}

function ssh-launch {
	# The original version of this broke on zsh -- not sure why.  So here's the much-simplified version.
	local line
	local rx
	local cmd
	read rx cmd < <(printAlias "$1")
	if [[ -z $rx ]]; then
		echo "ERROR: Unrecognized key" >&2
		printAlias
		return
	fi
	shift
	echo "$cmd $@"
	eval "$cmd $@"
}


function interpretSshSpec  {
	local spec=$1
	if [[ -z "$spec" ]]; then
		false
		return
	fi
	# Translate an ssh spec into a user@hostname form:
	if [[ $spec =~ .+@.+ ]]; then
		echo $1
		true
		return
	fi

	# Is there an alias starting with this spec?
	local len=${#spec}
	for a in "${SSH_ALIASES[@]}"; do
		if [[ "${a:0:$len}" == "$spec" ]]; then
			echo "$a" | awk '{$1=""; print }'
			true
			return
		fi
	done

	false
}

function ssh-menu {
	# List the available specs from getSshAliases and let the user choose:

	select item in "${SSH_ALIASES[@]}"; do
		echo $item
		return
	done
}

alias xsh='ssh-launch'

if [[ -z $sourceMe ]]; then
	# Populate SSH_ALIASES

	declare -a SSH_ALIASES

	if [[ -f $HOME/.ssh/aliases ]]; then
		source $HOME/.ssh/aliases
	else
		echo "No ~/.ssh/aliases exists" >&2
	fi

fi

