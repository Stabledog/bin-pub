#!/bin/bash

# bbpy-debug
#
#   Runs a Python script in pudb, using the Bloomberg-specific 'bbpy' interpreter.  If
#   bbpy isn't found, falls back to whatever you have for 'python'.
#
#   Notes: 
#
#       1.  This script creates symlinks in the current dir to debugger-specific Python
#           code.  You must have write permissions, naturally.  It's also a good idea not to
#           commit these symlinks to source control.
#
#       2.  There are a number of python interpreters floating around the BB environment. We 
#           search the list of interpreters shown in 'findBbpy()' below to determine which
#           will be used.
#
#           If that finds the wrong interpreter, then you should set $BBPY_PATH in the 
#           environment before calling bbpy-debug, e.g.:
#
#              BBPY_PATH=/bb/bin/marscorepy2.6.tsk bbpy-debug ./myscript.py
#

pudb_helpers_root=/home/lmatheson4/downloads
export PYTHONPATH
PYTHONPATH=$PYTHONPATH:$PWD

# List of symlinks to create.  {symlink_name} {target-relative-to-pudb_helpers_root}
function helpers {
    echo "pudb pudb-254630eec/pudb
pygments pygments-main-8c6c2adfc985/pygments
urwid urwid-59591b8/urwid"
}

#
function errExit {
    echo "ERROR: $@" >&2
    exit 1
}

function makeSymlink {
    local root=$1
    local linkname=$2
    local relsource=$3
    # Make a symlink from $root/$relsource to ./$linkname, if it doesn't exist already.
    [ -h $linkname ] || {  ln -s $root/$relsource $linkname || errExit "Failed creating $linkname to $root/$relsource"; }
    
}

function findBbpy {
    # There's more than one version of bbpy, plus we may want to fall back
    # to regular python...

    [[ -z $BBPY_PATH ]] || { echo "$BBPY_PATH";  true; return; }
    for xp in "/opt/bb/bin/bbpy2.7" "/bb/bin/bbpy" "/opt/bb/bin/bbpy" "/usr/bin/python"; do
        if [[ -x $xp ]]; then
            echo "$xp"
            true
            return
        fi
    done
}

function makeSymlinks {
    while read line; do
        makeSymlink $pudb_helpers_root $line
    done < <(helpers)
}

if [[ -z $sourceMe ]]; then
    # Find bbpy, or fall back to python:
    interp=$(findBbpy)

    makeSymlinks 

    # Invoke the debugger, forward all params:
    $interp -m pudb.run $@
fi

