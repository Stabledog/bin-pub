#!/bin/bash

# Populate SSH_ALIASES

declare -a SSH_ALIASES

# Note: med2iacracy puts localhost rdp on 10000, and anchor rdp on 10001

SSH_ALIASES="mediacracy 	ssh -Y lmatheson@mediacracy
med2iacracy 	ssh -Y -p 12254 -L 10000:localhost:3389 -L 10002:locahost:5900 -L 10001:anchor:3389 -L 10003:anchor:22 lmatheson@mediacracy.dynalias.net
cachet	  		ssh -Y cachet@mediacracy
openstacker     ssh -Y lmatheson@openstacker
cyg 			ssh -Y lmatheson@lapcygwin
j1 				ssh -Y jenkins@jenkins1
p6				ssh -Y root@pigs06
pig 			ssh -Y lmatheson@pigsadmin
math 			ssh -Y lmatheson@pigsmath
ftiweb-test1 	ssh -Y lmatheson@ftiweb-test1
patmc			ssh -Y lmatheson2@pmcshane-dev.bacon.illumina.com
base 			ssh -Y lmatheson@ftiweb-base"

function printAlias {
	local xkey="^$1"
	echo "$SSH_ALIASES" | grep "$xkey"
}

function ssh-launch {
	# The original version of this broke on zsh -- not sure why.  So here's the much-simplified version.
	local line
	local rx
	local cmd
	read rx cmd < <(printAlias "$1")
	if [[ -z $rx ]]; then
		echo "ERROR: Unrecognized key" >&2
		printAlias
		return
	fi
	shift
	echo "$cmd $@"
	eval "$cmd $@"
}


function interpretSshSpec  {
    local spec=$1
    if [[ -z "$spec" ]]; then
		false
		return
    fi
    # Translate an ssh spec into a user@hostname form:
    if [[ $spec =~ .+@.+ ]]; then
		echo $1
		true
		return
    fi

    # Is there an alias starting with this spec?
    local len=${#spec}
    for a in "${SSH_ALIASES[@]}"; do
		if [[ "${a:0:$len}" == "$spec" ]]; then
			echo "$a" | awk '{$1=""; print }'
			true
			return
		fi
	done

    false
}

function ssh-menu {
    # List the available specs from getSshAliases and let the user choose:

    select item in "${SSH_ALIASES[@]}"; do
		echo $item
		return
    done
}

alias xsh='ssh-launch'
