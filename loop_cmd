#!/bin/bash
# loop_cmd
#
#    Given a shell command, this puts it into an endless loop with a continuation prompt at the end of each iteration.
#
#   e.g.:
#
#   $  loop_cmd cmd arg1 arg2 arg3   # Run cmd with its args over and over, prompting for restart each time.
#
#  or...
#
#  $ loop_cmd <<< "echo \$(date)"
# 
# Advanced:  If you'd like to have this as a function in your login shell (so you can use it with internal
# shell commands too), add this to ~/.bashrc:
# 
#     sourceMe=1 source /path/to/loop_cmd/script
#


function loop_cmd {
    cmd=$1
    shift
    if [[ -z $cmd ]]; then
        echo -n "Enter command to loop, then Ctrl+D: "
        cmd=$(cat) 
    fi
    nloop=1
    while true; do
        $cmd "$@"
        res=$?
        echo -e "<<-- loop_cmd[${nloop}], program returned $res.  Command was: "  
        echo -e " -->> $cmd $@"  

        while true; do
            read -n 1 -p " -->> Hit 'c' to continue (loop again), 'x' to quit: " </dev/tty
            case $REPLY in
                x|X) 
                    return $?;
                    ;;
                c|C)
                    unset REPLY
                    echo ""
                    break;
                    ;;
                *)
                    echo " -->> loop_cmd doesn't understand: $REPLY"
                    unset REPLY
                    ;;
            esac
        done

    (( nloop = $nloop + 1 ))
    done
}

if [[ -z $sourceMe ]]; then
    loop_cmd "$@"
fi

