#!/bin/bash

# git-wc-inventory
#
# Recursive find and maintenance of git repos. Run --help  
#    It can:
#      - Produce an 'inventory' report of found repos showing wc status, remotes, etc.
#      - Launch a shell for each working copy with "mark done" and error/normal exit
#      - Use a previously generated dir list (wcfile) as input 
#
#

interactive=false
wcfile_only=false
skip_mirrors=false

die() {
    echo "ERROR: $*" >&2
    exit 1
}

help() {
    cat <<-EOF
git-wc-inventory [root/dir]  
    -> Scan root/dir for working copies.  Defaults to PWD

git-wc-inventory --wcfile-only
    -> Generate wcfile (list of dirs containing working copies), but don't make do report generation

git-wc-inventory --wcfile [path-to-file]
    -> Read working-copy pathnames from file

git-wc-inventory --skip-mirrors
    -> If there's a remote and the wc is clean relative to it, skip processing

git-wc-inventory --interactive
    -> Launch a shell for each dir after printing status, so user can do maintenance.
       User may do 'exit 0' to continue, 'exit 1' to abort, 'git-wc-inventory-mark-done' to mark current dir complete.
EOF
}

make_wc_listing() {
    local rootdir="$1"
    (
        cd "$rootdir" || die "Bad root dir $rootdir"
        find . -type d -name '.git'  | sed -e 's^/.git$^^' -e 's%^./%%'
    )
}

is_mirror_clean() {
    # If there's at least one remote and no dirty local files, return true
    local n_remotes=$(git remote -v | wc -l )
    [[ $n_remotes -eq 0 ]] && { false; return; }
    # git diff-index --quiet HEAD || { false; return; }
    [[ "$(git status --porcelain | wc -l)" -gt 0 ]] && { false; return; }
    true;
}


eval_single_wc() {
    local wc_dir="$1"
    echo
    echo
    cd "${wc_dir}" || die "Can't cd to ${wc_dir}"
    echo -e "wc-found>>>\t${wc_dir}\t$PWD"
    if $skip_mirrors && is_mirror_clean $PWD; then
        echo -e "   ---> clean mirror, --skip-mirrors is enabled."
        return
    fi
    git remote -v 2>&1 | sed 's/^/    /'
    git branch -a 2>&1 | sed 's/^/    /'
    git status 2>&1 | sed 's/^/ :::: /'
    if $interactive ; then
        if [[  -f .git/done ]]; then
            echo "  --> skipping interactive because .git/done was found."
        else
            echo
            echo " << git-inventory subshell: >>  "
            echo "  - exit 0 to leave current shell"
            echo "  - exit 1 to terminate inventory"
            echo "  - git-wc-inventory-mark-done to mark complete"
            echo

            Ps1Tail=git-inventory bash || exit 1
        fi
    fi
}


do_inventory() {
    # Create a wc listfile and then run
    local top_dir="${1:-$PWD}"
    (
        [[ -n $wcfile ]] && wc_listfile=$wcfile || wc_listfile=/tmp/git-inventory-$$
        cd "$top_dir" || die "Can't cd to $top_dir"
        echo -e "do_inventory>>\t$PWD"
        [[ -z $wcfile ]] && {
            make_wc_listing "$top_dir" | tee $wc_listfile
            echo "Project list written to $wc_listfile" >&2
        }
        $wcfile_only && exit 0
        set -- $( grep -Ev '^ *#' "$wc_listfile" )
        for gitpath; do
            (
                eval_single_wc "$gitpath" || exit 1
            ) || die "Quit at $PWD"

        done
    )
}


if [[ -z $sourceMe ]]; then
    while [[ -n $1 ]]; do
        if [[ "$1" == "--help" ]]; then
            help
            exit 1
        elif [[ "$1" == "--interactive" ]]; then
            interactive=true
        elif [[ "$1" == "--skip-mirrors" ]]; then
            skip_mirrors=true
        elif [[ $1 == "--wcfile" ]]; then
            export wcfile="$2"
            shift
        elif [[ $1 == "--wcfile-only" ]]; then
            wcfile_only=true
        fi
        shift
    done
    do_inventory "$@"
fi


