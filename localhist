# vim: filetype=sh
# localhist
#
#   localhist h[elp]    # Get help.
#   localhist o[n]      # Set HISTFILE to <current dir>/bash_history
#   localhist j[oin]    # Join by searching up in tree for 'bash_history'
#   localhist w[rite]   # Write buffer to current HISTFILE
#   localhist r[ead]    # Read from current HISTFILE to buffer
#   localhist [of]f     # Switch HISTFILE back to ~/bash_history
#   localhist s[how]    # Show status
#   localhist d[ump]    # Dump current histfile
#   localhist e[dit]    # Load current history buffer into $EDITOR
#   localhist c[lean]   # Clean current HISTFILE, removing short lines
#   localhist co[m]pare # Compare current HISTFILE with ~/.bash_history
#   localhist on read   # Sequence example: turn on, then read.
#   localhist o r       # ... same thing, fewer letters

localhist_join() {
    # Search up thru parent dirs to find nearest 'bash_history' (no dot),
    # and set HISTFILE to that path.  Typically such files are per-project
    # bound.
    local orgDir=$PWD
    while true; do
        if [[ -f bash_history ]]; then
            localhist_set $PWD/bash_history
            echo "Ok I found and set HISTFILE to $HISTFILE"
            cd $orgDir
            return
        fi
        if [[ $PWD == '/' ]]; then
            echo "I can't find a parent bash_history, HISTFILE is still $HISTFILE"
            false
            return
        fi
        cd ..
    done
    cd $orgDir
}
localhist_set() {
    # So we can restore our HISTFILE across shell init:
    HISTFILE=$1
    export HISTFILE_PRESERVE=$1
}

localhist() {
    [[ -z $1 ]] && { localhist help; echo -en "  \033[;33mNow:" $'\U27a9' " " ; localhist show; echo -en "\033[;0m"; return; }
    while [[ -n $1 ]]; do
        case $1 in
            o|on)
                if [[ $HISTFILE == $PWD/bash_history ]] ; then
                    echo Already on
                    localhist show
                else
                    localhist_set $PWD/bash_history
                    echo "Ok: I set HISTFILE is $HISTFILE "
                fi
            ;;
            j|join)
                localhist_join "$@"
            ;;
            f|off)
                if [[ $HISTFILE == ~/.bash_history ]]; then
                    echo Already off
                    localhist show
                else
                    localhist_set ~/.bash_history
                    echo "Ok: I set HISTFILE to ~/.bash_history"
                fi
            ;;
            w|write)
                history -w
                echo "Ok: I wrote buffer to $HISTFILE"
            ;;
            c|clean)
                histfile_clean $HISTFILE || return;
                echo "Ok: cleaned $HISTFILE"
            ;;
            r|read)
                history -r
                echo "Ok: I read buffer from $HISTFILE"
            ;;
            e|edit)
                echo "Editing $HISTFILE:"
                $EDITOR $HISTFILE
            ;;
            s|show)
                echo "HISTFILE=$HISTFILE: $(wc -l $HISTFILE | cut -d' ' -f 1) lines"
            ;;
            d|dump)
                ( history -c; history -r; history; echo -e "  \033[;33m(From $HISTFILE)\033[;0m" )
            ;;
            m|compare)
                if [[ $HISTFILE == ~/.bash_history ]]; then
                    echo "ERROR: nothing to compare, we're on $HISTFILE" >&2
                    false
                    return
                fi
                vimdiff ~/.bash_history $HISTFILE
            ;;
            h|help)
                egrep '^#   localhist ' ~/bin/localhist | cut -c 3-
            ;;
            *)
                localhist help
                echo "Error: unknown arg $1" >&2
            ;;

        esac
        shift
    done
}
