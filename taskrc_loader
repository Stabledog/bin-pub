# taskrc_loader
#
#  This should be sourced in the shell, it has no value as an external command.  Run 'taskrc.sh' if you want
# a scriptable thing.
#
# vim: filetype=sh :
#
#   taskrc is a shell helper for directory-specific 'taskrc' files.  A taskrc file is "your favoritee shell definitions 
# that are focused on a particular project or task".  
#
# Often the taskrc file is saved with a project source code base.
#
# TODO:
#     Add -x options to maintain index of all taskrc's
#

#set -x

declare -x taskrc_dir  # Directory of the most-recently-loaded taskrc file
declare taskrc_load_time=0 # epoch timestamp (from ctime) for MRL taskrc, used for dirty detection

function errExit {
    echo "ERROR: $*" >&2
    exit 1
}

function ctime {
    date +%s
}

function taskrc_is_dirty {
    local print=false
    local detail=false
    [[ $1 == "-pd" ]] && { print=true; detail=true; }
    [[ $1 == "-p" ]] && print=true
    local cur=$(ctime ${taskrc_dir}/taskrc)
    if (( $cur > $taskrc_load_time )); then
        if $print; then
            echo -n "dirty"
            if $detail; then
                echo -n ": $cur > $taskrc_load_time"
            fi
        fi
        echo ""
        true
        return
    fi
    if $print; then
        echo -n "unchanged"
        if $detail; then
            echo -n ": $taskrc_load_time"
        fi
        echo ""
    fi
    false
}

function register_taskrc {
    local file="$1"
    [[ -z $file ]] && return $(errExit "No file $file")
    [[ -f $file ]] || return $(errExit "No file(2) $file")
    local xpath=$(readlink -f $file)
    local xhash=$(echo "$xpath" | md5sum | cut -d ' ' -f 1)
    [[ -L $HOME/.taskrc_reg/$xhash ]] && return
    mkdir -p $HOME/.taskrc_reg 
    cd $HOME/.taskrc_reg
    ln -sf "${xpath}" ./${xhash}
    cd - &>/dev/null
}

function external_taskrc_call {
    # If user calls taskrc [args], and [args] are not recognized, then we
    # try to evaluate them as a possible call on a function defined in the current
    # taskrc script.
    #
    # This allows (for example) invocation of taskrc-defined functions from within an editor or python app, etc.
    # To avoid chaos, there are limitations that matter:
    #   1. $taskrc_dir must be defined in the calling environment, we don't attempt to find it
    #   2. $taskrc_dir/taskrc must exist
    #
    # To make this work, we create a subshell, source taskrc, verify that a function exists matching $1, 
    # and then eval the full command in that subshell.
    [[ -z $taskrc_dir ]] && return $(errExit "Unknown arguments(0): $@ [no taskrc_dir]" )
    [[ -f $taskrc_dir/taskrc ]] || return $(errExit "Unknown arguments(1): $@ [no taskrc]")
    (
        source $taskrc_dir/taskrc
        # stub echo "inner subshell, args $@" >&2
        funcname=$1
        [[ -z $funcname ]] && errExit "Unknown arguments(2): $@ [taskrc_dir=$taskrc_dir]"
        [[ $(type -t $funcname) == function ]] || errExit "$funcname is not a function"
        shift
        cmd="${funcname} $@"
        eval "$cmd"
    )
}

function taskrc_dir_find {
    local xd="$1"  # start search here
    local search_up=$2 # search parent?
    
    if [[ -r ${xd}/taskrc ]]; then
        echo ${xd}
        true
        return
    fi
    if $search_up; then
        if [[ $(dirname $xd) != '/' ]]; then
            taskrc_dir_find $(dirname $xd) $search_up  # Recurse
            return
        fi
    fi
    false
}

function taskrc_v2 {
    local help=false       # -h, --help : print help for this function, then help for most recent taskrc
    local search_up=false  # -s, --search-up : find taskrc by searching parent dirs of .
    local refresh=false    # -r, --refresh : reload most recent taskrc (i.e. to pick up changes)
    local dump=false       # -d, --dump: print contents of most recent taskrc to stdout
    local info=false       # -i, --info: print information about most recent taskrc (path)
    local load=true        # Our default behavior is to find/load the taskrc
    local force=false       # -f, --force: do the thing anyway
    local new=false        # -n, --new: create a new taskrc here .
    local edit=false       # -e, --edit: edit current taskrc, then reload
    while [[ ! -z $1 ]]; do
        case $1 in 
            -h|--help)
                help=true
                ;;
            -s|--search-up)
                search_up=true
                ;;
            -i|--info)
                info=true
                ;;
            -r|--refresh)
                refresh=true
                ;;
            -f|--force)
                force=true
                ;;
            -d|--dump)
                dump=true
                ;;
            -i|--info)
                info=true
                ;;
            -e|--edit)
                edit=true
                ;;
            -n|--new)
                new=true
                ;;
            *)
                external_taskrc_call $@
                return
                ;;
        esac
        shift
    done
    if $help; then
        taskrc_dir=$taskrc_dir taskrc_help
        load=false
    fi
    if $dump; then
        [[ -r $taskrc_dir/taskrc ]] || return $(errExit "No current taskrc to dump")
        cat $taskrc_dir/taskrc
        echo "[dump OK for $taskrc_dir/taskrc (file is $(taskrc_is_dirty -p) ) ]"  >&2
        load=false
    fi
    if $info; then
        echo "$taskrc_dir/taskrc"
        echo "File is $(taskrc_is_dirty -pd)" 2>/dev/null
        load=false
    fi
    if $new; then
        [[ -e ./taskrc && ! $force ]] && return $(errExit "Can't do --new, there's already a taskrc in $PWD")
        if ! taskrc_dir=$PWD taskrc_new; then
            return 
        fi
        taskrc_dir=$PWD
        edit=true
    fi
    if $edit; then
        [[ -r $taskrc_dir/taskrc ]] || return $(errExit "No current taskrc to edit")
        (
            cd $taskrc_dir || errExit "Can't cd to $taskrc_dir"
            $EDITOR $taskrc_dir/taskrc
        )
        refresh=true
    fi
    if $refresh; then
        if [[ ! -r $taskrc_dir/taskrc ]]; then
            if [[ -r ./taskrc ]]; then
                read -p "No current taskrc to refresh, but there's a ./taskrc here. Load it? [Y/n]: "
                if [[ $REPLY =~ [yY] ]] || [[ -z $REPLY ]]; then
                    taskrc_v2
                    return
                fi
            else
                read -p "No current taskrc or ./taskrc. Search parent dirs instead? [Y/n]: "
                if [[ $REPLY =~ [yY] ]] || [[ -z $REPLY ]]; then
                    taskrc_v2 -s
                    return
                fi
            fi
            return $(echo "Quit selected.")
        fi
        if ! taskrc_is_dirty ; then

            if ! $force; then
                return $(errExit "[ no refresh, $taskrc_dir/taskrc is unchanged. -f to force. ]")
            fi
        fi
        pushd "$taskrc_dir" >/dev/null
        echo -n "Refreshing $PWD/taskrc: ${BASHPID}["
        register_taskrc "${taskrc_dir}/taskrc"
        source "${taskrc_dir}/taskrc"
        taskrc_load_time=$(ctime "${taskrc_dir}/taskrc" )
        echo "]  OK  @$(date)"
        popd >/dev/null
        load=false
    fi

    if $load; then

        # Now it's time to establish $taskrc_dir, having dispensed with other options:
        taskrc_dir=$(taskrc_dir_find $PWD $search_up)

        #[[ -z $taskrc_dir ]] && return $(errExit "taskrc_dir not resolved")
        if [[ ! -r ${taskrc_dir}/taskrc ]]; then
            local pp=""
            if $search_up; then
                pp=" or its parents, sorry."
            else
                pp=", try -s to search parent dirs."
            fi
            return $(errExit "no taskrc file in ${PWD}${pp}")
        fi
        pushd ${taskrc_dir} &>/dev/null || return $(errExit "Can't cd to ${taskrc_dir}")
        if $help; then
            egrep -v '^$' ./taskrc
            echo " >> done help: [${taskrc_dir}/taskrc]"
        fi
        if $load; then
            echo "In [$PWD], loading taskrc into current shell:" 
            source ./taskrc
            taskrc_load_time=$(ctime taskrc)
            echo " >> done, $(cat taskrc | wc -l ) lines sourced."
        fi
        popd >/dev/null
    fi
}

alias taskrc2='taskrc_v2'  # Todo: replace the old taskrc with this sort of alias


alias cd_taskrc='cd $taskrc_dir'
alias cd_t='cd $taskrc_dir'

