# vim: filetype=sh :
# bin/bashrc-common


if [[ -n $CUSTOM_SHELL ]]; then
    # We expect bash to come from our build:
    if [[ `which bash` != ${CUSTOM_SHELL} ]]; then
        PATH=$(dirname -- ${CUSTOM_SHELL}):$PATH
    fi
fi

function init_sh_tools {
    # Platform-dependent tools detection (dang you, MacOS!):
    eval $(
        PATH=/opt/bb/bin:/usr/local/bin:/usr/bin:/bin
        for tool in Realpath.realpath Sed.sed Uname.uname; do
            tv=${tool#*.}
            tp=$(which $tv)
            [[ -z $tp ]] && { echo "ERROR: can't find $tv in $PATH" >&2; continue; }
            echo "${tool%.*}=$tp;"
        done
    )
}

set +o noclobber

init_sh_tools


init_browser_tools() {

    alias wbs='web-search.sh'
    alias goo='web-search.sh google'
    alias gogl='web-search.sh gogl'
    alias web-search='web-search.sh'
    alias trnma='web-search trnma'
    alias mine='web-search mine'
}

[[ -n $PS1 ]] && init_browser_tools


function define_yellow {
    function _yellow_ {
        # Do "Yellow=1 [args]" to enable _yellow_ (diagnostic) output,
        # or "yellow [args]" for unconditional output
        if [[ -n $Yellow ]]; then
            yellow "$@"
        fi
    }
    function yellow {
        echo -en "\033[;33m" >&2
        echo "$@" >&2
        echo -en "\033[;0m" >&2
    }
    unset define_yellow
}

define_yellow



# Outer code can define notBash=true to disable non-posix bashisms:
if [[ ! -z $notBash ]] && $notBash; then
    notBash=true; isBash=false
    xlocal=""  # ksh doesn't allow 'local'
else
    notBash=false; isBash=true
    xlocal=local
fi


[[ -z $LmHome ]] && export LmHome=$HOME

alias pathadd=$LmHome/bin/pathadd

# The ~/projects dir should be a symlink to a working root appropriate for
# source controlled and/or toolchain-built projects.  An mbig is a good candidate,
# or /c/Projects on a WSL1 environment, or /var/Projects on a Mac.  The HOME
# dir itself is not an ideal place for the storage, in most cases.  On a
# Docker container, /root/projects can point to a mounted volume to satisfy
# this need:
if [[ -d ~/projects ]]; then
    ProjectsHome=$( cd ~/projects; $Realpath . )
else
    ProjectsHome=${ProjectsHome:-$HOME/projects}
    echo "WARNING: no ~/projects dir: this should be a symlink to mbig, /c/Projects, /var/projects, or similar general project root.  \$ProjectsHome remains unresolved." >&2
fi
export ProjectsHome


function isSunos {
    [[ $( $Uname ) == "SunOS" ]]
}


errExit() {
    echo "ERROR: $*" >&2
    exit 1
}





#----------------------------------------------------------------
#  Shell identification
#
is_cygwin() {
    [[ -n $CYGWIN ]] || false
}
function shell_identify {
	export CYGWIN
	export MACOSX=false
	if $notBash; then
		eval "function shopt {
			 doNothing=true
			# turn shopt into nothingness if not bash
		}"
	fi

	[[ -f /Cygwin.bat ]] || [[ -d /home/mobaxterm ]]  && {
        #  See https://www.cygwin.com/cygwin-ug-net/using-cygwinenv.html on $CYGWIN
	    CYGWIN="export:winsymlinks:native"
    }

	[[ -d /Applications/Preview.app ]] && MACOSX=true
    [[ $( $Uname ) == Darwin ]] && MACOSX=true

	# If not running interactively, don't do anything
	if [[ ! -t 0 ]]; then
		return
	fi
}


shell_identify

[[ -n $PS1 ]] && $MACOSX && type -t brew &>/dev/null && {
    [[ -r "$(brew --prefix)/etc/profile.d/bash_completion.sh" ]] && source "$(brew --prefix)/etc/profile.d/bash_completion.sh"
}

alias which='type -p '




function ptop {
    # Run top, but filter on a specific command line string, e.g.:
    #
    #     $  ptop my_busy_proc
    #

    eval "$xlocal cmd $1"
    top -p $(pgrep ${cmd} | head -n 19 | tr '\n' ',')0
}



export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8




# Set the terminal title:
function title {
    export title_tail="$*"
    export title_hostname_result=
    title_hostname() {
        [[ -n $title_hostname_result ]] && { echo $title_hostname_result; return; }
        [[ -x /bin/hostname ]] && { title_hostname_result=$(/bin/hostname); return; }
        title_hostname_result=$HOSTNAME
        echo $title_hostname_result
    }
    printf '\E]2;%s\E\\' "$title_tail - $(tty)@$(title_hostname)"
}

if [[ -z $title_tail ]]; then
    title "bash"
else
    title "$title_tail"
fi

unset DISPLAY

[[ -f ~/bin/bash_aliases ]] && source ~/bin/bash_aliases

is_cygwin && {
	source ~/bin/cyg/cyg-utils
	alias sudo="$@"
}


[[ -x ${HOME}/bin/vim-tmux ]] && {
    alias vit="${HOME}/bin/vim-tmux -v";
    alias vih="${HOME}/bin/vim-tmux -h";
}
[[ -x ${HOME}/bin/tmux-split-launch ]] && {
    alias tsh="${HOME}/bin/tmux-split-launch -h"
    alias tsv="${HOME}/bin/tmux-split-launch -v"
}

export EDITOR=vim


set -o vi

# setargs is used for arbitrary mapping of positional args.  (Disabling
# glob expansion is both a feature and sometimes a bug.)
alias setargs='set -f; set -- '
alias seta=setargs
alias getargs='builtin echo "$@"'
alias geta=getargs


# If we want a shell to not quit, here's how:
function no_exit {
	alias exit="echo 'Sorry, exit is disabled.  Use \"command exit\" if  serious'"
}

# Preferred options for `less`:
export LESS="-rFX"


function notepad {
    local fname=~/notepad
    while [[ -n $1 ]]; do
        case $1 in
            [0-9])
                fname=~/notepad_$1
                ;;
            --help|-h)
                (
                    echo "notepad # Edit ~/notepad"
                    echo "notepad 3 # Edit ~/notepad_3"
                    echo "notepad 2 - # Cat stdin to ~/notepad_2 then edit"
                    echo "notepad 4 -c # Send ~/notepad_4 to clipboard"
                ) >&2
                return
                ;;

            -c)
                cat $fname | xclip -i
                return
                ;;
            -)
                echo "Hit Ctrl+D to end entry:" >&2
                cat > $fname
                $EDITOR $fname
                return
                ;;
            *)
                echo "ERROR: unknown arg $1" >&2; return;
                return
                ;;
        esac
        shift
    done
    $EDITOR $fname
}



function quickshell() {
    [[ $@ =~ -h|--help ]] && {
        echo 'Reset project-specific env and start interactive subshell. Examples:'
        echo '$  qs echo Entering quickshell # Run any command you like on entry'
        echo '$  qs cd somewhere/else \; ls -al # Sequence with \; separator'
        echo '$  qs --help  # This help'
        return
    }

    $BASH --init-file <(
        echo 'export QSLEV'
        echo '[[ -n QSLEV ]] && QSLEV=$(( $QSLEV + 1 )) || QSLEV=1'
        echo 'export Ps1Tail="qs:${QSLEV}"'
        echo 'unset taskrc_dir'
        cat ~/.bashrc;
        echo 'HISTFILE=~/.bash_history'
        if [[ $# -gt 0 ]]; then
            echo 'set -x &>/dev/null'
            echo "$@"
            echo 'set +x &>/dev/null'
        fi
    )
}

[[ -n $PS1 ]] && alias qs=quickshell

function load_rcs1 {
    eval "$xlocal rootDir=$1"
    while read path; do
        [[ -z $path ]] && continue
        [[ -f $path ]] || continue
        echo "$path"
    done < <( /bin/ls -1 -- ${rootDir}/.taskrc/ 2>/dev/null | egrep -v '\.vim$' | sort | $Sed -e "s%^%${rootDir}/.taskrc/%" )
}

function loadTaskrcs {
    set +o noclobber
    local logfile9=$HOME/.loadtaskrcs.log
    echo "$(date): loadTaskrcs: trainload initialization of ~/.taskrc" > $logfile9

    function xlog_rc {
        echo "+++ $@" >> $logfile9
    }

	# Load everything in $HOME/.taskrc, sorting alpha.  Most
	# of these should be symlinks.
	while read line; do
		if [[ -f $line ]]; then
		    xlog_rc "$line"
            source $line >> $logfile9 2>&1
            [[ $? == 0 ]] || { echo "Error sourcing [$line] in loadTaskrcs()" >> $logfile9;  }
        fi
    done < <( load_rcs1 "$HOME" )
}

[[ -f ~/bin/sourceMeRun.taskrc ]] && source ~/bin/sourceMeRun.taskrc


# Completion setup quickly:
# curl -sL https://github.com/Stabledog/complete-alias/releases/download/1.18.4/setup-complete-alias.sh | bash -
[[ -f "${HOME}/.completion_loader" ]] && source "${HOME}/.completion_loader" # Added by setup-complete-alias.sh



unalias rm 2>/dev/null # If someone aliased my rm, cut it out.

export MYLIBS=${LmHome}/mylibs/$( $Uname )

# Make tmux use 256 colors so vim highlighting works right:
alias tmux='tmux -2'
alias tw='tmuxw'


[[ -f ~/bin/python3-select.sh ]] && {
    sourceMe=1 source ~/bin/python3-select.sh
}

source ~/.local/bin/shellkit-loader.bashrc

[[ -n $PS1 ]] && {
    # Most of these tools can be managed with shpm:
    [[ -f ${HOME}/.local/bin/shellkit-pm/shellkit-pm.bashrc ]] && source ${HOME}/.local/bin/shellkit-pm/shellkit-pm.bashrc # Added by shellkit-pm-setup.sh
    [[ -f ${HOME}/.local/bin/cdpp/cdpp.bashrc ]] && source ${HOME}/.local/bin/cdpp/cdpp.bashrc # Added by cdpp-setup.sh
    [[ -f ${HOME}/.local/bin/docktools/docktools.bashrc ]] && source ${HOME}/.local/bin/docktools/docktools.bashrc # Added by docktools-setup.sh
    [[ -f ${HOME}/.local/bin/gitsmart/gitsmart.bashrc ]] && source ${HOME}/.local/bin/gitsmart/gitsmart.bashrc # Added by gitsmart-setup.sh
    [[ -f ${HOME}/.local/bin/ps1-foo/ps1-foo.bashrc ]] && source ${HOME}/.local/bin/ps1-foo/ps1-foo.bashrc # Added by ps1-foo-setup.sh
    #       [[ -f ${HOME}/.local/bin/localhist/localhist.bashrc ]] && source ${HOME}/.local/bin/localhist/localhist.bashrc # Added by localhist setup.sh
    [[ -f ${HOME}/.bash_completion.d/localhist-completion.bash ]] && source ${HOME}/.bash_completion.d/localhist-completion.bash # Added by localhist setup.sh
    [[ -f ${HOME}/.local/bin/gh-help/gh-help.bashrc ]] && source ${HOME}/.local/bin/gh-help/gh-help.bashrc # Added by gh-help-setup.sh
    [[ -f ${HOME}/.local/bin/taskrc-kit/taskrc-kit.bashrc ]] && source ${HOME}/.local/bin/taskrc-kit/taskrc-kit.bashrc # Added by taskrc-kit-setup.sh
    [[ -f ${HOME}/.local/bin/looper/looper.bashrc ]] && source ${HOME}/.local/bin/looper/looper.bashrc # Added by looper-setup.sh
}

[[ -z $MSYS ]] && {
    # Not on git-bash, but otherwise undupe the PATH
    [[ -f ~/bin/path_undupe.py ]] && {
        tmpPath="$(python3 ~/bin/path_undupe.py -u )"
        [[ -n $tmpPath ]] && PATH="$tmpPath" || echo "ERROR: path_undupe.py in .bashrc failed" >&2
    }
}


# If there's a .taskrc directory in HOME, just source everything found there.
# This should be the LAST environment-changing operation in .bashrc, because
# .taskrc/ files are the most machine-and-user-specific elements that
# matter.  Basically you can override anything else with a .taskrc/* file
# tuned exactly to purpose with all context available at load time.
if [[ -d $HOME/.taskrc ]] && $isBash; then
	loadTaskrcs
fi

[[ 1 -eq 1  ]] # END


